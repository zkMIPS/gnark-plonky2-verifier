// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: prover.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResultCode int32

const (
	ResultCode_OK                ResultCode = 0
	ResultCode_INVALID_PARAMETER ResultCode = 1
	ResultCode_INTERNAL_ERROR    ResultCode = 2
	ResultCode_BUSY              ResultCode = 3
	ResultCode_UNSPECIFIED       ResultCode = 4
)

// Enum value maps for ResultCode.
var (
	ResultCode_name = map[int32]string{
		0: "OK",
		1: "INVALID_PARAMETER",
		2: "INTERNAL_ERROR",
		3: "BUSY",
		4: "UNSPECIFIED",
	}
	ResultCode_value = map[string]int32{
		"OK":                0,
		"INVALID_PARAMETER": 1,
		"INTERNAL_ERROR":    2,
		"BUSY":              3,
		"UNSPECIFIED":       4,
	}
)

func (x ResultCode) Enum() *ResultCode {
	p := new(ResultCode)
	*p = x
	return p
}

func (x ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_prover_proto_enumTypes[0].Descriptor()
}

func (ResultCode) Type() protoreflect.EnumType {
	return &file_prover_proto_enumTypes[0]
}

func (x ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultCode.Descriptor instead.
func (ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{0}
}

type GetStatusResponse_Status int32

const (
	GetStatusResponse_STATUS_UNSPECIFIED GetStatusResponse_Status = 0
	GetStatusResponse_STATUS_BOOTING     GetStatusResponse_Status = 1
	GetStatusResponse_STATUS_COMPUTING   GetStatusResponse_Status = 2
	GetStatusResponse_STATUS_IDLE        GetStatusResponse_Status = 3
	GetStatusResponse_STATUS_HALT        GetStatusResponse_Status = 4
)

// Enum value maps for GetStatusResponse_Status.
var (
	GetStatusResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_BOOTING",
		2: "STATUS_COMPUTING",
		3: "STATUS_IDLE",
		4: "STATUS_HALT",
	}
	GetStatusResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_BOOTING":     1,
		"STATUS_COMPUTING":   2,
		"STATUS_IDLE":        3,
		"STATUS_HALT":        4,
	}
)

func (x GetStatusResponse_Status) Enum() *GetStatusResponse_Status {
	p := new(GetStatusResponse_Status)
	*p = x
	return p
}

func (x GetStatusResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetStatusResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_prover_proto_enumTypes[1].Descriptor()
}

func (GetStatusResponse_Status) Type() protoreflect.EnumType {
	return &file_prover_proto_enumTypes[1]
}

func (x GetStatusResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetStatusResponse_Status.Descriptor instead.
func (GetStatusResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{3, 0}
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V0_0_1 string `protobuf:"bytes,1,opt,name=v0_0_1,json=v001,proto3" json:"v0_0_1,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{0}
}

func (x *Version) GetV0_0_1() string {
	if x != nil {
		return x.V0_0_1
	}
	return ""
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=prover.v1.ResultCode" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{1}
}

func (x *Result) GetCode() ResultCode {
	if x != nil {
		return x.Code
	}
	return ResultCode_OK
}

func (x *Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{2}
}

type GetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        GetStatusResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=prover.v1.GetStatusResponse_Status" json:"status,omitempty"`
	ProverName    string                   `protobuf:"bytes,2,opt,name=prover_name,json=proverName,proto3" json:"prover_name,omitempty"`
	ProverId      string                   `protobuf:"bytes,3,opt,name=prover_id,json=proverId,proto3" json:"prover_id,omitempty"`
	NumberOfCores uint64                   `protobuf:"varint,4,opt,name=number_of_cores,json=numberOfCores,proto3" json:"number_of_cores,omitempty"`
	TotalMemory   uint64                   `protobuf:"varint,5,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	FreeMemory    uint64                   `protobuf:"varint,6,opt,name=free_memory,json=freeMemory,proto3" json:"free_memory,omitempty"`
}

func (x *GetStatusResponse) Reset() {
	*x = GetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse) ProtoMessage() {}

func (x *GetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{3}
}

func (x *GetStatusResponse) GetStatus() GetStatusResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetStatusResponse_STATUS_UNSPECIFIED
}

func (x *GetStatusResponse) GetProverName() string {
	if x != nil {
		return x.ProverName
	}
	return ""
}

func (x *GetStatusResponse) GetProverId() string {
	if x != nil {
		return x.ProverId
	}
	return ""
}

func (x *GetStatusResponse) GetNumberOfCores() uint64 {
	if x != nil {
		return x.NumberOfCores
	}
	return 0
}

func (x *GetStatusResponse) GetTotalMemory() uint64 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

func (x *GetStatusResponse) GetFreeMemory() uint64 {
	if x != nil {
		return x.FreeMemory
	}
	return 0
}

type GetTaskResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofId string `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	// uuid
	ComputedRequestId string `protobuf:"bytes,2,opt,name=computed_request_id,json=computedRequestId,proto3" json:"computed_request_id,omitempty"`
}

func (x *GetTaskResultRequest) Reset() {
	*x = GetTaskResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResultRequest) ProtoMessage() {}

func (x *GetTaskResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResultRequest.ProtoReflect.Descriptor instead.
func (*GetTaskResultRequest) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{4}
}

func (x *GetTaskResultRequest) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

func (x *GetTaskResultRequest) GetComputedRequestId() string {
	if x != nil {
		return x.ComputedRequestId
	}
	return ""
}

type GetTaskResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofId           string  `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	ComputedRequestId string  `protobuf:"bytes,2,opt,name=computed_request_id,json=computedRequestId,proto3" json:"computed_request_id,omitempty"`
	Result            *Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetTaskResultResponse) Reset() {
	*x = GetTaskResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResultResponse) ProtoMessage() {}

func (x *GetTaskResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResultResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResultResponse) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{5}
}

func (x *GetTaskResultResponse) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

func (x *GetTaskResultResponse) GetComputedRequestId() string {
	if x != nil {
		return x.ComputedRequestId
	}
	return ""
}

func (x *GetTaskResultResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type SplitElfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofId           string `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	ComputedRequestId string `protobuf:"bytes,2,opt,name=computed_request_id,json=computedRequestId,proto3" json:"computed_request_id,omitempty"`
	BaseDir           string `protobuf:"bytes,3,opt,name=base_dir,json=baseDir,proto3" json:"base_dir,omitempty"`
	ElfPath           string `protobuf:"bytes,4,opt,name=elf_path,json=elfPath,proto3" json:"elf_path,omitempty"`
	SegPath           string `protobuf:"bytes,5,opt,name=seg_path,json=segPath,proto3" json:"seg_path,omitempty"`
	BlockNo           uint64 `protobuf:"varint,6,opt,name=block_no,json=blockNo,proto3" json:"block_no,omitempty"`
	SegSize           uint32 `protobuf:"varint,7,opt,name=seg_size,json=segSize,proto3" json:"seg_size,omitempty"`
	Args              string `protobuf:"bytes,8,opt,name=args,proto3" json:"args,omitempty"`
	PublicInputPath   string `protobuf:"bytes,9,opt,name=public_input_path,json=publicInputPath,proto3" json:"public_input_path,omitempty"`
	PrivateInputPath  string `protobuf:"bytes,10,opt,name=private_input_path,json=privateInputPath,proto3" json:"private_input_path,omitempty"`
	OutputPath        string `protobuf:"bytes,11,opt,name=output_path,json=outputPath,proto3" json:"output_path,omitempty"`
}

func (x *SplitElfRequest) Reset() {
	*x = SplitElfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitElfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitElfRequest) ProtoMessage() {}

func (x *SplitElfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitElfRequest.ProtoReflect.Descriptor instead.
func (*SplitElfRequest) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{6}
}

func (x *SplitElfRequest) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

func (x *SplitElfRequest) GetComputedRequestId() string {
	if x != nil {
		return x.ComputedRequestId
	}
	return ""
}

func (x *SplitElfRequest) GetBaseDir() string {
	if x != nil {
		return x.BaseDir
	}
	return ""
}

func (x *SplitElfRequest) GetElfPath() string {
	if x != nil {
		return x.ElfPath
	}
	return ""
}

func (x *SplitElfRequest) GetSegPath() string {
	if x != nil {
		return x.SegPath
	}
	return ""
}

func (x *SplitElfRequest) GetBlockNo() uint64 {
	if x != nil {
		return x.BlockNo
	}
	return 0
}

func (x *SplitElfRequest) GetSegSize() uint32 {
	if x != nil {
		return x.SegSize
	}
	return 0
}

func (x *SplitElfRequest) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *SplitElfRequest) GetPublicInputPath() string {
	if x != nil {
		return x.PublicInputPath
	}
	return ""
}

func (x *SplitElfRequest) GetPrivateInputPath() string {
	if x != nil {
		return x.PrivateInputPath
	}
	return ""
}

func (x *SplitElfRequest) GetOutputPath() string {
	if x != nil {
		return x.OutputPath
	}
	return ""
}

type SplitElfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofId           string  `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	ComputedRequestId string  `protobuf:"bytes,2,opt,name=computed_request_id,json=computedRequestId,proto3" json:"computed_request_id,omitempty"`
	Result            *Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SplitElfResponse) Reset() {
	*x = SplitElfResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitElfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitElfResponse) ProtoMessage() {}

func (x *SplitElfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitElfResponse.ProtoReflect.Descriptor instead.
func (*SplitElfResponse) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{7}
}

func (x *SplitElfResponse) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

func (x *SplitElfResponse) GetComputedRequestId() string {
	if x != nil {
		return x.ComputedRequestId
	}
	return ""
}

func (x *SplitElfResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ProveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofId           string `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	ComputedRequestId string `protobuf:"bytes,2,opt,name=computed_request_id,json=computedRequestId,proto3" json:"computed_request_id,omitempty"`
	BaseDir           string `protobuf:"bytes,3,opt,name=base_dir,json=baseDir,proto3" json:"base_dir,omitempty"`
	SegPath           string `protobuf:"bytes,4,opt,name=seg_path,json=segPath,proto3" json:"seg_path,omitempty"`
	BlockNo           uint64 `protobuf:"varint,5,opt,name=block_no,json=blockNo,proto3" json:"block_no,omitempty"`
	SegSize           uint32 `protobuf:"varint,6,opt,name=seg_size,json=segSize,proto3" json:"seg_size,omitempty"`
	ProofPath         string `protobuf:"bytes,7,opt,name=proof_path,json=proofPath,proto3" json:"proof_path,omitempty"`
	PubValuePath      string `protobuf:"bytes,8,opt,name=pub_value_path,json=pubValuePath,proto3" json:"pub_value_path,omitempty"`
}

func (x *ProveRequest) Reset() {
	*x = ProveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProveRequest) ProtoMessage() {}

func (x *ProveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProveRequest.ProtoReflect.Descriptor instead.
func (*ProveRequest) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{8}
}

func (x *ProveRequest) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

func (x *ProveRequest) GetComputedRequestId() string {
	if x != nil {
		return x.ComputedRequestId
	}
	return ""
}

func (x *ProveRequest) GetBaseDir() string {
	if x != nil {
		return x.BaseDir
	}
	return ""
}

func (x *ProveRequest) GetSegPath() string {
	if x != nil {
		return x.SegPath
	}
	return ""
}

func (x *ProveRequest) GetBlockNo() uint64 {
	if x != nil {
		return x.BlockNo
	}
	return 0
}

func (x *ProveRequest) GetSegSize() uint32 {
	if x != nil {
		return x.SegSize
	}
	return 0
}

func (x *ProveRequest) GetProofPath() string {
	if x != nil {
		return x.ProofPath
	}
	return ""
}

func (x *ProveRequest) GetPubValuePath() string {
	if x != nil {
		return x.PubValuePath
	}
	return ""
}

type ProveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofId           string  `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	ComputedRequestId string  `protobuf:"bytes,2,opt,name=computed_request_id,json=computedRequestId,proto3" json:"computed_request_id,omitempty"`
	Result            *Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ProveResponse) Reset() {
	*x = ProveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProveResponse) ProtoMessage() {}

func (x *ProveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProveResponse.ProtoReflect.Descriptor instead.
func (*ProveResponse) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{9}
}

func (x *ProveResponse) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

func (x *ProveResponse) GetComputedRequestId() string {
	if x != nil {
		return x.ComputedRequestId
	}
	return ""
}

func (x *ProveResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type AggregateInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofPath    string `protobuf:"bytes,1,opt,name=proof_path,json=proofPath,proto3" json:"proof_path,omitempty"`
	PubValuePath string `protobuf:"bytes,2,opt,name=pub_value_path,json=pubValuePath,proto3" json:"pub_value_path,omitempty"`
	IsAgg        bool   `protobuf:"varint,3,opt,name=is_agg,json=isAgg,proto3" json:"is_agg,omitempty"`
}

func (x *AggregateInput) Reset() {
	*x = AggregateInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateInput) ProtoMessage() {}

func (x *AggregateInput) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateInput.ProtoReflect.Descriptor instead.
func (*AggregateInput) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{10}
}

func (x *AggregateInput) GetProofPath() string {
	if x != nil {
		return x.ProofPath
	}
	return ""
}

func (x *AggregateInput) GetPubValuePath() string {
	if x != nil {
		return x.PubValuePath
	}
	return ""
}

func (x *AggregateInput) GetIsAgg() bool {
	if x != nil {
		return x.IsAgg
	}
	return false
}

type AggregateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofId           string          `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	ComputedRequestId string          `protobuf:"bytes,2,opt,name=computed_request_id,json=computedRequestId,proto3" json:"computed_request_id,omitempty"`
	BaseDir           string          `protobuf:"bytes,3,opt,name=base_dir,json=baseDir,proto3" json:"base_dir,omitempty"`
	SegPath           string          `protobuf:"bytes,4,opt,name=seg_path,json=segPath,proto3" json:"seg_path,omitempty"`
	BlockNo           uint64          `protobuf:"varint,5,opt,name=block_no,json=blockNo,proto3" json:"block_no,omitempty"`
	SegSize           uint32          `protobuf:"varint,6,opt,name=seg_size,json=segSize,proto3" json:"seg_size,omitempty"`
	Input1            *AggregateInput `protobuf:"bytes,7,opt,name=input1,proto3" json:"input1,omitempty"`
	Input2            *AggregateInput `protobuf:"bytes,8,opt,name=input2,proto3" json:"input2,omitempty"`
	AggProofPath      string          `protobuf:"bytes,9,opt,name=agg_proof_path,json=aggProofPath,proto3" json:"agg_proof_path,omitempty"`
	AggPubValuePath   string          `protobuf:"bytes,10,opt,name=agg_pub_value_path,json=aggPubValuePath,proto3" json:"agg_pub_value_path,omitempty"`
	IsFinal           bool            `protobuf:"varint,11,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	OutputDir         string          `protobuf:"bytes,12,opt,name=output_dir,json=outputDir,proto3" json:"output_dir,omitempty"`
}

func (x *AggregateRequest) Reset() {
	*x = AggregateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateRequest) ProtoMessage() {}

func (x *AggregateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateRequest.ProtoReflect.Descriptor instead.
func (*AggregateRequest) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{11}
}

func (x *AggregateRequest) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

func (x *AggregateRequest) GetComputedRequestId() string {
	if x != nil {
		return x.ComputedRequestId
	}
	return ""
}

func (x *AggregateRequest) GetBaseDir() string {
	if x != nil {
		return x.BaseDir
	}
	return ""
}

func (x *AggregateRequest) GetSegPath() string {
	if x != nil {
		return x.SegPath
	}
	return ""
}

func (x *AggregateRequest) GetBlockNo() uint64 {
	if x != nil {
		return x.BlockNo
	}
	return 0
}

func (x *AggregateRequest) GetSegSize() uint32 {
	if x != nil {
		return x.SegSize
	}
	return 0
}

func (x *AggregateRequest) GetInput1() *AggregateInput {
	if x != nil {
		return x.Input1
	}
	return nil
}

func (x *AggregateRequest) GetInput2() *AggregateInput {
	if x != nil {
		return x.Input2
	}
	return nil
}

func (x *AggregateRequest) GetAggProofPath() string {
	if x != nil {
		return x.AggProofPath
	}
	return ""
}

func (x *AggregateRequest) GetAggPubValuePath() string {
	if x != nil {
		return x.AggPubValuePath
	}
	return ""
}

func (x *AggregateRequest) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *AggregateRequest) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

type AggregateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofId           string  `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	ComputedRequestId string  `protobuf:"bytes,2,opt,name=computed_request_id,json=computedRequestId,proto3" json:"computed_request_id,omitempty"`
	Result            *Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AggregateResponse) Reset() {
	*x = AggregateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateResponse) ProtoMessage() {}

func (x *AggregateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateResponse.ProtoReflect.Descriptor instead.
func (*AggregateResponse) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{12}
}

func (x *AggregateResponse) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

func (x *AggregateResponse) GetComputedRequestId() string {
	if x != nil {
		return x.ComputedRequestId
	}
	return ""
}

func (x *AggregateResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type AggregateAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofId           string `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	ComputedRequestId string `protobuf:"bytes,2,opt,name=computed_request_id,json=computedRequestId,proto3" json:"computed_request_id,omitempty"`
	BaseDir           string `protobuf:"bytes,3,opt,name=base_dir,json=baseDir,proto3" json:"base_dir,omitempty"`
	SegPath           string `protobuf:"bytes,4,opt,name=seg_path,json=segPath,proto3" json:"seg_path,omitempty"`
	BlockNo           uint64 `protobuf:"varint,5,opt,name=block_no,json=blockNo,proto3" json:"block_no,omitempty"`
	SegSize           uint32 `protobuf:"varint,6,opt,name=seg_size,json=segSize,proto3" json:"seg_size,omitempty"`
	ProofNum          uint32 `protobuf:"varint,7,opt,name=proof_num,json=proofNum,proto3" json:"proof_num,omitempty"`
	ProofDir          string `protobuf:"bytes,8,opt,name=proof_dir,json=proofDir,proto3" json:"proof_dir,omitempty"`
	PubValueDir       string `protobuf:"bytes,9,opt,name=pub_value_dir,json=pubValueDir,proto3" json:"pub_value_dir,omitempty"`
	OutputDir         string `protobuf:"bytes,10,opt,name=output_dir,json=outputDir,proto3" json:"output_dir,omitempty"`
}

func (x *AggregateAllRequest) Reset() {
	*x = AggregateAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateAllRequest) ProtoMessage() {}

func (x *AggregateAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateAllRequest.ProtoReflect.Descriptor instead.
func (*AggregateAllRequest) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{13}
}

func (x *AggregateAllRequest) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

func (x *AggregateAllRequest) GetComputedRequestId() string {
	if x != nil {
		return x.ComputedRequestId
	}
	return ""
}

func (x *AggregateAllRequest) GetBaseDir() string {
	if x != nil {
		return x.BaseDir
	}
	return ""
}

func (x *AggregateAllRequest) GetSegPath() string {
	if x != nil {
		return x.SegPath
	}
	return ""
}

func (x *AggregateAllRequest) GetBlockNo() uint64 {
	if x != nil {
		return x.BlockNo
	}
	return 0
}

func (x *AggregateAllRequest) GetSegSize() uint32 {
	if x != nil {
		return x.SegSize
	}
	return 0
}

func (x *AggregateAllRequest) GetProofNum() uint32 {
	if x != nil {
		return x.ProofNum
	}
	return 0
}

func (x *AggregateAllRequest) GetProofDir() string {
	if x != nil {
		return x.ProofDir
	}
	return ""
}

func (x *AggregateAllRequest) GetPubValueDir() string {
	if x != nil {
		return x.PubValueDir
	}
	return ""
}

func (x *AggregateAllRequest) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

type AggregateAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofId           string  `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	ComputedRequestId string  `protobuf:"bytes,2,opt,name=computed_request_id,json=computedRequestId,proto3" json:"computed_request_id,omitempty"`
	Result            *Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AggregateAllResponse) Reset() {
	*x = AggregateAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateAllResponse) ProtoMessage() {}

func (x *AggregateAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateAllResponse.ProtoReflect.Descriptor instead.
func (*AggregateAllResponse) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{14}
}

func (x *AggregateAllResponse) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

func (x *AggregateAllResponse) GetComputedRequestId() string {
	if x != nil {
		return x.ComputedRequestId
	}
	return ""
}

func (x *AggregateAllResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type FinalProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofId                 string `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	ComputedRequestId       string `protobuf:"bytes,2,opt,name=computed_request_id,json=computedRequestId,proto3" json:"computed_request_id,omitempty"`
	CommonCircuitData       []byte `protobuf:"bytes,3,opt,name=common_circuit_data,json=commonCircuitData,proto3" json:"common_circuit_data,omitempty"`
	VerifierOnlyCircuitData []byte `protobuf:"bytes,4,opt,name=verifier_only_circuit_data,json=verifierOnlyCircuitData,proto3" json:"verifier_only_circuit_data,omitempty"`
	ProofWithPublicInputs   []byte `protobuf:"bytes,5,opt,name=proof_with_public_inputs,json=proofWithPublicInputs,proto3" json:"proof_with_public_inputs,omitempty"`
}

func (x *FinalProofRequest) Reset() {
	*x = FinalProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalProofRequest) ProtoMessage() {}

func (x *FinalProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalProofRequest.ProtoReflect.Descriptor instead.
func (*FinalProofRequest) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{15}
}

func (x *FinalProofRequest) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

func (x *FinalProofRequest) GetComputedRequestId() string {
	if x != nil {
		return x.ComputedRequestId
	}
	return ""
}

func (x *FinalProofRequest) GetCommonCircuitData() []byte {
	if x != nil {
		return x.CommonCircuitData
	}
	return nil
}

func (x *FinalProofRequest) GetVerifierOnlyCircuitData() []byte {
	if x != nil {
		return x.VerifierOnlyCircuitData
	}
	return nil
}

func (x *FinalProofRequest) GetProofWithPublicInputs() []byte {
	if x != nil {
		return x.ProofWithPublicInputs
	}
	return nil
}

type FinalProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofId           string  `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	ComputedRequestId string  `protobuf:"bytes,2,opt,name=computed_request_id,json=computedRequestId,proto3" json:"computed_request_id,omitempty"`
	Result            *Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *FinalProofResponse) Reset() {
	*x = FinalProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalProofResponse) ProtoMessage() {}

func (x *FinalProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalProofResponse.ProtoReflect.Descriptor instead.
func (*FinalProofResponse) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{16}
}

func (x *FinalProofResponse) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

func (x *FinalProofResponse) GetComputedRequestId() string {
	if x != nil {
		return x.ComputedRequestId
	}
	return ""
}

func (x *FinalProofResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_prover_proto protoreflect.FileDescriptor

var file_prover_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0x1f, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x06, 0x76, 0x30, 0x5f, 0x30, 0x5f, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x30, 0x30, 0x31, 0x22, 0x4d, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe8, 0x02,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x66, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x6c, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x10, 0x04, 0x22, 0x61, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf2, 0x02, 0x0a, 0x0f,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x6c, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61,
	0x73, 0x65, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6c, 0x66, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6c, 0x66, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x67, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x88, 0x01, 0x0a, 0x10, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x6c, 0x66, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8a, 0x02, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x44,
	0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x67, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x6c, 0x0a, 0x0e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x67,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x67, 0x67, 0x22, 0xbc,
	0x03, 0x0a, 0x10, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x67,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x67,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x65, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x31, 0x12, 0x31, 0x0a,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x32,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x70, 0x75,
	0x62, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x50, 0x75, 0x62, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x22, 0x89, 0x01,
	0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc9, 0x02, 0x0a, 0x13, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x73, 0x65, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x67, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x65, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x65, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x44,
	0x69, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x44, 0x69, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x44, 0x69, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x14, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x1a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x57, 0x69, 0x74, 0x68, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x12,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x5a, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45,
	0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x53,
	0x59, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x04, 0x32, 0x9e, 0x04, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x08, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x45,
	0x6c, 0x66, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x45, 0x6c, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x45, 0x6c, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x09, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x6b, 0x4d, 0x49, 0x50, 0x53, 0x2f, 0x67, 0x6e, 0x61, 0x72, 0x6b,
	0x2d, 0x70, 0x6c, 0x6f, 0x6e, 0x6b, 0x79, 0x32, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prover_proto_rawDescOnce sync.Once
	file_prover_proto_rawDescData = file_prover_proto_rawDesc
)

func file_prover_proto_rawDescGZIP() []byte {
	file_prover_proto_rawDescOnce.Do(func() {
		file_prover_proto_rawDescData = protoimpl.X.CompressGZIP(file_prover_proto_rawDescData)
	})
	return file_prover_proto_rawDescData
}

var file_prover_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_prover_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_prover_proto_goTypes = []interface{}{
	(ResultCode)(0),               // 0: prover.v1.ResultCode
	(GetStatusResponse_Status)(0), // 1: prover.v1.GetStatusResponse.Status
	(*Version)(nil),               // 2: prover.v1.Version
	(*Result)(nil),                // 3: prover.v1.Result
	(*GetStatusRequest)(nil),      // 4: prover.v1.GetStatusRequest
	(*GetStatusResponse)(nil),     // 5: prover.v1.GetStatusResponse
	(*GetTaskResultRequest)(nil),  // 6: prover.v1.GetTaskResultRequest
	(*GetTaskResultResponse)(nil), // 7: prover.v1.GetTaskResultResponse
	(*SplitElfRequest)(nil),       // 8: prover.v1.SplitElfRequest
	(*SplitElfResponse)(nil),      // 9: prover.v1.SplitElfResponse
	(*ProveRequest)(nil),          // 10: prover.v1.ProveRequest
	(*ProveResponse)(nil),         // 11: prover.v1.ProveResponse
	(*AggregateInput)(nil),        // 12: prover.v1.AggregateInput
	(*AggregateRequest)(nil),      // 13: prover.v1.AggregateRequest
	(*AggregateResponse)(nil),     // 14: prover.v1.AggregateResponse
	(*AggregateAllRequest)(nil),   // 15: prover.v1.AggregateAllRequest
	(*AggregateAllResponse)(nil),  // 16: prover.v1.AggregateAllResponse
	(*FinalProofRequest)(nil),     // 17: prover.v1.FinalProofRequest
	(*FinalProofResponse)(nil),    // 18: prover.v1.FinalProofResponse
}
var file_prover_proto_depIdxs = []int32{
	0,  // 0: prover.v1.Result.code:type_name -> prover.v1.ResultCode
	1,  // 1: prover.v1.GetStatusResponse.status:type_name -> prover.v1.GetStatusResponse.Status
	3,  // 2: prover.v1.GetTaskResultResponse.result:type_name -> prover.v1.Result
	3,  // 3: prover.v1.SplitElfResponse.result:type_name -> prover.v1.Result
	3,  // 4: prover.v1.ProveResponse.result:type_name -> prover.v1.Result
	12, // 5: prover.v1.AggregateRequest.input1:type_name -> prover.v1.AggregateInput
	12, // 6: prover.v1.AggregateRequest.input2:type_name -> prover.v1.AggregateInput
	3,  // 7: prover.v1.AggregateResponse.result:type_name -> prover.v1.Result
	3,  // 8: prover.v1.AggregateAllResponse.result:type_name -> prover.v1.Result
	3,  // 9: prover.v1.FinalProofResponse.result:type_name -> prover.v1.Result
	4,  // 10: prover.v1.ProverService.GetStatus:input_type -> prover.v1.GetStatusRequest
	6,  // 11: prover.v1.ProverService.GetTaskResult:input_type -> prover.v1.GetTaskResultRequest
	8,  // 12: prover.v1.ProverService.SplitElf:input_type -> prover.v1.SplitElfRequest
	10, // 13: prover.v1.ProverService.Prove:input_type -> prover.v1.ProveRequest
	13, // 14: prover.v1.ProverService.Aggregate:input_type -> prover.v1.AggregateRequest
	15, // 15: prover.v1.ProverService.AggregateAll:input_type -> prover.v1.AggregateAllRequest
	17, // 16: prover.v1.ProverService.FinalProof:input_type -> prover.v1.FinalProofRequest
	5,  // 17: prover.v1.ProverService.GetStatus:output_type -> prover.v1.GetStatusResponse
	7,  // 18: prover.v1.ProverService.GetTaskResult:output_type -> prover.v1.GetTaskResultResponse
	9,  // 19: prover.v1.ProverService.SplitElf:output_type -> prover.v1.SplitElfResponse
	11, // 20: prover.v1.ProverService.Prove:output_type -> prover.v1.ProveResponse
	14, // 21: prover.v1.ProverService.Aggregate:output_type -> prover.v1.AggregateResponse
	16, // 22: prover.v1.ProverService.AggregateAll:output_type -> prover.v1.AggregateAllResponse
	18, // 23: prover.v1.ProverService.FinalProof:output_type -> prover.v1.FinalProofResponse
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_prover_proto_init() }
func file_prover_proto_init() {
	if File_prover_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prover_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitElfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitElfResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prover_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prover_proto_goTypes,
		DependencyIndexes: file_prover_proto_depIdxs,
		EnumInfos:         file_prover_proto_enumTypes,
		MessageInfos:      file_prover_proto_msgTypes,
	}.Build()
	File_prover_proto = out.File
	file_prover_proto_rawDesc = nil
	file_prover_proto_goTypes = nil
	file_prover_proto_depIdxs = nil
}
