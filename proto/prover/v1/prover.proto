syntax = "proto3";

package prover.v1;

option go_package = "github.com/0xPolygonHermez/zkevm-node/prover/pb";

message Version {
    string v0_0_1 = 1;
}

// timestamps are represented in unix time in seconds

enum ResultCode {
    UNSPECIFIED = 0;
    OK = 1;
    ERROR = 2;
    INTERNAL_ERROR = 3;
    BUSY = 4;
}

message Result {
    ResultCode code = 1;
    string message = 2;
}

service ProverService {
    rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}
    rpc GetTaskResult(GetTaskResultRequest) returns (GetTaskResultResponse) {}
    rpc SplitElf(SplitElfRequest) returns (SplitElfResponse) {}
    rpc Prove(ProveRequest) returns (ProveResponse) {}
    rpc Aggregate(AggregateRequest) returns (AggregateResponse) {}
    rpc AggregateAll(AggregateAllRequest) returns (AggregateAllResponse) {}
    rpc FinalProof(FinalProofRequest) returns (FinalProofResponse) {}
}

message GetStatusRequest {}

message GetStatusResponse {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_BOOTING = 1;
        STATUS_COMPUTING = 2;
        STATUS_IDLE = 3;
        STATUS_HALT = 4;
    }
    Status status = 1;
    string prover_name = 2;
    string prover_id = 3;
    uint64 number_of_cores = 4;
    uint64 total_memory = 5;
    uint64 free_memory = 6;
}

message GetTaskResultRequest {
    string proof_id = 1;
    // uuid
    string computed_request_id = 2;
}

message GetTaskResultResponse {
    string proof_id = 1;
    string computed_request_id = 2;
    Result result = 3;
}

message SplitElfRequest {
    uint64 chain_id = 1;
    uint64 timestamp = 2;
    string proof_id = 3;
    string computed_request_id = 4;

    string base_dir = 5;
    string elf_Path = 6;
    string seg_path = 7;
    uint64 block_no = 8;
    uint32 seg_size = 9;
}

message SplitElfResponse {
    string proof_id = 1;
    string computed_request_id = 2;
    Result result = 3;
}

message ProveRequest {
    uint64 chain_id = 1;
    uint64 timestamp = 2;
    string proof_id = 3;
    string computed_request_id = 4;

    string base_dir = 5;
    string seg_path = 6;
    uint64 block_no = 7;
    uint32 seg_size = 8;
    string proof_path = 9;
    string pub_value_path = 10;
}

message ProveResponse {
    string proof_id = 1;
    string computed_request_id = 2;
    Result result = 3;
}

message AggregateRequest {
    uint64 chain_id = 1;
    uint64 timestamp = 2;
    string proof_id = 3;
    string computed_request_id = 4;

    string base_dir = 5;
    string seg_path = 6;
    uint64 block_no = 7;
    uint32 seg_size = 8;
    string proof_path1 = 9;
    string proof_path2 = 10;
    string pub_value_path1 = 11;
    string pub_value_path2 = 12;
    bool is_agg_1 = 13;
    bool is_agg_2 = 14;
    string agg_proof_path = 15;
    string agg_pub_value_path = 16;
}

message AggregateResponse {
    string proof_id = 1;
    string computed_request_id = 2;
    Result result = 3;
}

message AggregateAllRequest {
    uint64 chain_id = 1;
    uint64 timestamp = 2;
    string proof_id = 3;
    string computed_request_id = 4;

    string base_dir = 5;
    string seg_path = 6;
    uint64 block_no = 7;
    uint32 seg_size = 8;
    uint32 proof_num = 9;
    string proof_dir = 10;
    string pub_value_dir = 11;
    string output_dir = 12;
}

message AggregateAllResponse {
    string proof_id = 1;
    string computed_request_id = 2;
    Result result = 3;
}

message FinalProofRequest {
    uint64 chain_id = 1;
    uint64 timestamp = 2;
    string proof_id = 3;
    string computed_request_id = 4;
    bytes common_circuit_data = 5;
    bytes verifier_only_circuit_data = 6;
    bytes proof_with_public_inputs = 7;
}

message FinalProofResponse {
    string proof_id = 1;
    string computed_request_id = 2;
    Result result = 3;
}