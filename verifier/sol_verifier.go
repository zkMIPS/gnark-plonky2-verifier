// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package verifier

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ProofInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicInputNotInField\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"ParsePublicInput\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"compressProof\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"compressed\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"compressedProof\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[65]\",\"name\":\"input\",\"type\":\"uint256[65]\"}],\"name\":\"verifyCompressedProof\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[65]\",\"name\":\"input\",\"type\":\"uint256[65]\"}],\"name\":\"verifyProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// CompressProof is a free data retrieval call binding the contract method 0x44f63692.
//
// Solidity: function compressProof(uint256[8] proof) view returns(uint256[4] compressed)
func (_Contract *ContractCaller) CompressProof(opts *bind.CallOpts, proof [8]*big.Int) ([4]*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "compressProof", proof)

	if err != nil {
		return *new([4]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)

	return out0, err

}

// CompressProof is a free data retrieval call binding the contract method 0x44f63692.
//
// Solidity: function compressProof(uint256[8] proof) view returns(uint256[4] compressed)
func (_Contract *ContractSession) CompressProof(proof [8]*big.Int) ([4]*big.Int, error) {
	return _Contract.Contract.CompressProof(&_Contract.CallOpts, proof)
}

// CompressProof is a free data retrieval call binding the contract method 0x44f63692.
//
// Solidity: function compressProof(uint256[8] proof) view returns(uint256[4] compressed)
func (_Contract *ContractCallerSession) CompressProof(proof [8]*big.Int) ([4]*big.Int, error) {
	return _Contract.Contract.CompressProof(&_Contract.CallOpts, proof)
}

// VerifyCompressedProof is a free data retrieval call binding the contract method 0x3fd51eb0.
//
// Solidity: function verifyCompressedProof(uint256[4] compressedProof, uint256[65] input) view returns()
func (_Contract *ContractCaller) VerifyCompressedProof(opts *bind.CallOpts, compressedProof [4]*big.Int, input [65]*big.Int) error {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "verifyCompressedProof", compressedProof, input)

	if err != nil {
		return err
	}

	return err

}

// VerifyCompressedProof is a free data retrieval call binding the contract method 0x3fd51eb0.
//
// Solidity: function verifyCompressedProof(uint256[4] compressedProof, uint256[65] input) view returns()
func (_Contract *ContractSession) VerifyCompressedProof(compressedProof [4]*big.Int, input [65]*big.Int) error {
	return _Contract.Contract.VerifyCompressedProof(&_Contract.CallOpts, compressedProof, input)
}

// VerifyCompressedProof is a free data retrieval call binding the contract method 0x3fd51eb0.
//
// Solidity: function verifyCompressedProof(uint256[4] compressedProof, uint256[65] input) view returns()
func (_Contract *ContractCallerSession) VerifyCompressedProof(compressedProof [4]*big.Int, input [65]*big.Int) error {
	return _Contract.Contract.VerifyCompressedProof(&_Contract.CallOpts, compressedProof, input)
}

// VerifyProof is a paid mutator transaction binding the contract method 0x7436dbb8.
//
// Solidity: function verifyProof(uint256[8] proof, uint256[65] input) returns()
func (_Contract *ContractTransactor) VerifyProof(opts *bind.TransactOpts, proof [8]*big.Int, input [65]*big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "verifyProof", proof, input)
}

// VerifyProof is a paid mutator transaction binding the contract method 0x7436dbb8.
//
// Solidity: function verifyProof(uint256[8] proof, uint256[65] input) returns()
func (_Contract *ContractSession) VerifyProof(proof [8]*big.Int, input [65]*big.Int) (*types.Transaction, error) {
	return _Contract.Contract.VerifyProof(&_Contract.TransactOpts, proof, input)
}

// VerifyProof is a paid mutator transaction binding the contract method 0x7436dbb8.
//
// Solidity: function verifyProof(uint256[8] proof, uint256[65] input) returns()
func (_Contract *ContractTransactorSession) VerifyProof(proof [8]*big.Int, input [65]*big.Int) (*types.Transaction, error) {
	return _Contract.Contract.VerifyProof(&_Contract.TransactOpts, proof, input)
}

// ContractParsePublicInputIterator is returned from FilterParsePublicInput and is used to iterate over the raw logs and unpacked data for ParsePublicInput events raised by the Contract contract.
type ContractParsePublicInputIterator struct {
	Event *ContractParsePublicInput // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractParsePublicInputIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractParsePublicInput)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractParsePublicInput)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractParsePublicInputIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractParsePublicInputIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractParsePublicInput represents a ParsePublicInput event raised by the Contract contract.
type ContractParsePublicInput struct {
	X   *big.Int
	Y   *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterParsePublicInput is a free log retrieval operation binding the contract event 0xc70cc02aa8b0ca138c1fc0d4609e733c40610346f3f00db4da3f82b87870f19d.
//
// Solidity: event ParsePublicInput(uint256 indexed x, uint256 indexed y)
func (_Contract *ContractFilterer) FilterParsePublicInput(opts *bind.FilterOpts, x []*big.Int, y []*big.Int) (*ContractParsePublicInputIterator, error) {

	var xRule []interface{}
	for _, xItem := range x {
		xRule = append(xRule, xItem)
	}
	var yRule []interface{}
	for _, yItem := range y {
		yRule = append(yRule, yItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "ParsePublicInput", xRule, yRule)
	if err != nil {
		return nil, err
	}
	return &ContractParsePublicInputIterator{contract: _Contract.contract, event: "ParsePublicInput", logs: logs, sub: sub}, nil
}

// WatchParsePublicInput is a free log subscription operation binding the contract event 0xc70cc02aa8b0ca138c1fc0d4609e733c40610346f3f00db4da3f82b87870f19d.
//
// Solidity: event ParsePublicInput(uint256 indexed x, uint256 indexed y)
func (_Contract *ContractFilterer) WatchParsePublicInput(opts *bind.WatchOpts, sink chan<- *ContractParsePublicInput, x []*big.Int, y []*big.Int) (event.Subscription, error) {

	var xRule []interface{}
	for _, xItem := range x {
		xRule = append(xRule, xItem)
	}
	var yRule []interface{}
	for _, yItem := range y {
		yRule = append(yRule, yItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "ParsePublicInput", xRule, yRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractParsePublicInput)
				if err := _Contract.contract.UnpackLog(event, "ParsePublicInput", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseParsePublicInput is a log parse operation binding the contract event 0xc70cc02aa8b0ca138c1fc0d4609e733c40610346f3f00db4da3f82b87870f19d.
//
// Solidity: event ParsePublicInput(uint256 indexed x, uint256 indexed y)
func (_Contract *ContractFilterer) ParseParsePublicInput(log types.Log) (*ContractParsePublicInput, error) {
	event := new(ContractParsePublicInput)
	if err := _Contract.contract.UnpackLog(event, "ParsePublicInput", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
